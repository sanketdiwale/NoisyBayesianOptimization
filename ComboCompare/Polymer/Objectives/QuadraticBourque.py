# -*- coding: utf-8 -*-
"""
Created on Wed Jul 17 01:07:21 2019

@author: Vicky
"""

import numpy as np


def Quadratic_diamond(X):
    '''X is the matrix N x 3 for diamond input'''
    X = np.atleast_2d(X)
    mean = np.array([0.789931, 0.875172, 0.650252, 0.871259, 0.691304, 0.965172, 0.769182])
    std = np.array([0.16205, 0.0570662, 0.259126, 0.211464, 0.149004, 0.137647, 0.0999192])
    params= np.array([-1.38955, -17.4696, 2.1667, 0.281375, -1.55654, -0.0967564, 18.2156]).reshape(-1,1)

    u=np.stack((X[:,0],X[:,2],X[:,0]**2,X[:,0]*X[:,1],X[:,0]*X[:,2],X[:,1]*X[:,2],X[:,2]**2),axis=1)
    y_predict = np.dot((u-mean)/std,params)*1.24998759 +2.93447685
    
    
    return y_predict



def Quadratic_graphene(X):
    X = np.atleast_2d(X)
    mean = np.array([1.18880178, 1.01597633, 1.42360163, 1.10549704, 1.18983136,  1.21034024, 0.94446746, 1.01686391, 1.0495858])
    std = np.array([0.10174461, 0.13182524, 0.24120854, 0.18032731, 0.20828903, 0.20233918, 0.17649659, 0.20091415, 0.26708675])
    
    params = np.array([[-1.52140772],
       [-0.0142337 ],
       [ 4.23760281],
       [ 0.22672355],
       [-0.5055262 ],
       [-3.84643136],
       [-0.26515474],
       [ 0.55653832],
       [ 2.40204209]])
    
    
    u=np.stack((X[:,0],X[:,3],X[:,0]**2,X[:,0]*X[:,1],X[:,0]*X[:,2],X[:,0]*X[:,3],X[:,1]*X[:,3],X[:,2]*X[:,3],X[:,3]**2),axis=1)
    y_predict = np.dot((u-mean)/std,params)*0.9828382192183054 + 3.0245283269141456 
    
    
    return y_predict